1. Basic SQL (Select, Cartesian operation, from, where, insert, update, delete)
2. Intermediate (Join, String op, string function, Aggregate function, With, View)
3. Advance (Nested, Scalar, Sub-query, trigger, rank, index)
4. Ranking (rank(), dense_rank(), row  number())


Rank Syntax
rank_function over (partition by attr ORDER BY attr ASC|DESC) AS new   name
(B tree/B+tree)→m-way tree



# MySQL Complete Guide with Examples

Here's a comprehensive guide to MySQL covering all the topics you requested, with code examples for each concept.

## 1. Basic SQL Operations

### SELECT Statement
```sql
-- Basic SELECT
SELECT * FROM employees;

-- SELECT specific columns
SELECT first_name, last_name, salary FROM employees;

-- SELECT with WHERE clause
SELECT * FROM employees WHERE department = 'IT';
```

### Cartesian Product (CROSS JOIN)
```sql
-- Cartesian product of two tables
SELECT * FROM employees CROSS JOIN departments;

-- Equivalent syntax
SELECT * FROM employees, departments;
```

### INSERT Statement
```sql
-- Insert single row
INSERT INTO employees (first_name, last_name, email, hire_date)
VALUES ('John', 'Doe', 'john.doe@example.com', '2023-01-15');

-- Insert multiple rows
INSERT INTO employees (first_name, last_name, email, hire_date)
VALUES 
    ('Jane', 'Smith', 'jane.smith@example.com', '2023-02-20'),
    ('Mike', 'Johnson', 'mike.johnson@example.com', '2023-03-10');
```

### UPDATE Statement
```sql
-- Update single record
UPDATE employees SET salary = 75000 WHERE employee_id = 101;

-- Update multiple columns
UPDATE employees 
SET salary = salary * 1.1, 
    department = 'Finance' 
WHERE department = 'Accounting';

-- Update with condition
UPDATE products SET price = price * 0.9 WHERE stock_quantity > 100;
```

### DELETE Statement
```sql
-- Delete specific records
DELETE FROM employees WHERE employee_id = 102;

-- Delete with condition
DELETE FROM orders WHERE order_date < '2022-01-01';

-- Delete all records (be careful!)
DELETE FROM temp_table;
```

## 2. Intermediate SQL

### JOIN Operations
```sql
-- INNER JOIN
SELECT e.first_name, e.last_name, d.department_name
FROM employees e
INNER JOIN departments d ON e.department_id = d.department_id;

-- LEFT JOIN
SELECT c.customer_name, o.order_date
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id;

-- RIGHT JOIN
SELECT d.department_name, e.first_name
FROM departments d
RIGHT JOIN employees e ON d.department_id = e.department_id;

-- FULL OUTER JOIN (MySQL doesn't have FULL JOIN directly)
SELECT e.first_name, d.department_name
FROM employees e
LEFT JOIN departments d ON e.department_id = d.department_id
UNION
SELECT e.first_name, d.department_name
FROM employees e
RIGHT JOIN departments d ON e.department_id = d.department_id
WHERE e.department_id IS NULL;
```

### String Operations
```sql
-- Concatenation
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees;

-- Substring
SELECT SUBSTRING(email, 1, 5) AS email_prefix FROM employees;

-- String length
SELECT product_name, LENGTH(product_name) AS name_length FROM products;

-- Case conversion
SELECT UPPER(first_name) AS upper_name, LOWER(last_name) AS lower_name FROM employees;

-- Trimming
SELECT TRIM('   Hello World   ') AS trimmed_string;

-- Pattern matching
SELECT * FROM customers WHERE address LIKE '%Street%';
```

### String Functions
```sql
-- REPLACE
SELECT REPLACE(description, 'old', 'new') FROM products;

-- LOCATE (position of substring)
SELECT product_name, LOCATE('Pro', product_name) AS position FROM products;

-- FORMAT (number formatting)
SELECT FORMAT(salary, 2) AS formatted_salary FROM employees;

-- DATE_FORMAT
SELECT DATE_FORMAT(hire_date, '%M %d, %Y') AS formatted_date FROM employees;
```

### Aggregate Functions
```sql
-- COUNT
SELECT COUNT(*) AS total_employees FROM employees;

-- SUM
SELECT SUM(salary) AS total_salary FROM employees WHERE department = 'Sales';

-- AVG
SELECT AVG(price) AS average_price FROM products;

-- MIN/MAX
SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM employees;

-- GROUP BY
SELECT department, COUNT(*) AS employee_count 
FROM employees 
GROUP BY department;

-- HAVING
SELECT department, AVG(salary) AS avg_salary
FROM employees
GROUP BY department
HAVING AVG(salary) > 50000;
```

### WITH Clause (Common Table Expressions)
```sql
-- Simple CTE
WITH high_earners AS (
    SELECT * FROM employees WHERE salary > 100000
)
SELECT * FROM high_earners;

-- Multiple CTEs
WITH 
dept_stats AS (
    SELECT department, COUNT(*) AS emp_count 
    FROM employees 
    GROUP BY department
),
high_depts AS (
    SELECT department FROM dept_stats WHERE emp_count > 10
)
SELECT e.* 
FROM employees e
JOIN high_depts hd ON e.department = hd.department;
```

### VIEWs
```sql
-- Create a view
CREATE VIEW employee_details AS
SELECT e.employee_id, e.first_name, e.last_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;

-- Query a view
SELECT * FROM employee_details WHERE department_name = 'IT';

-- Update a view
CREATE OR REPLACE VIEW employee_details AS
SELECT e.employee_id, e.first_name, e.last_name, e.salary, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;

-- Drop a view
DROP VIEW IF EXISTS employee_details;
```

## 3. Advanced SQL

### Nested Queries
```sql
-- Subquery in WHERE
SELECT * FROM employees 
WHERE salary > (SELECT AVG(salary) FROM employees);

-- Subquery in FROM
SELECT dept_avg.department, dept_avg.avg_salary
FROM (
    SELECT department, AVG(salary) AS avg_salary
    FROM employees
    GROUP BY department
) AS dept_avg
WHERE dept_avg.avg_salary > 60000;

-- Subquery in SELECT
SELECT 
    first_name,
    last_name,
    salary,
    (SELECT AVG(salary) FROM employees) AS company_avg
FROM employees;
```

### Scalar Subqueries
```sql
-- Single value subquery
SELECT 
    product_name,
    price,
    (SELECT AVG(price) FROM products) AS avg_price,
    price - (SELECT AVG(price) FROM products) AS diff_from_avg
FROM products;

-- In WHERE clause
SELECT * FROM orders
WHERE order_amount > (SELECT AVG(order_amount) FROM orders);
```

### Correlated Subqueries
```sql
-- Employees earning more than their department average
SELECT e1.first_name, e1.last_name, e1.salary, e1.department
FROM employees e1
WHERE salary > (
    SELECT AVG(salary)
    FROM employees e2
    WHERE e2.department = e1.department
);
```

### TRIGGERs
```sql
-- Before insert trigger
DELIMITER //
CREATE TRIGGER before_employee_insert
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    IF NEW.salary < 0 THEN
        SET NEW.salary = 0;
    END IF;
END//
DELIMITER ;

-- After update trigger
DELIMITER //
CREATE TRIGGER after_salary_update
AFTER UPDATE ON employees
FOR EACH ROW
BEGIN
    IF NEW.salary <> OLD.salary THEN
        INSERT INTO salary_changes(employee_id, old_salary, new_salary, change_date)
        VALUES (NEW.employee_id, OLD.salary, NEW.salary, NOW());
    END IF;
END//
DELIMITER ;

-- Drop trigger
DROP TRIGGER IF EXISTS before_employee_insert;
```

### INDEXes
```sql
-- Create index
CREATE INDEX idx_employee_lastname ON employees(last_name);

-- Create composite index
CREATE INDEX idx_employee_dept_salary ON employees(department, salary);

-- Create unique index
CREATE UNIQUE INDEX idx_employee_email ON employees(email);

-- Show indexes
SHOW INDEXES FROM employees;

-- Drop index
DROP INDEX idx_employee_lastname ON employees;
```

## 4. Ranking Functions

### RANK(), DENSE_RANK(), ROW_NUMBER()
```sql
-- Basic ranking
SELECT 
    employee_id,
    first_name,
    last_name,
    salary,
    RANK() OVER (ORDER BY salary DESC) AS salary_rank,
    DENSE_RANK() OVER (ORDER BY salary DESC) AS salary_dense_rank,
    ROW_NUMBER() OVER (ORDER BY salary DESC) AS salary_row_num
FROM employees;

-- Partitioned ranking
SELECT 
    department,
    first_name,
    last_name,
    salary,
    RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
FROM employees;

-- Top 3 earners per department
WITH ranked_employees AS (
    SELECT 
        department,
        first_name,
        last_name,
        salary,
        DENSE_RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS rank_in_dept
    FROM employees
)
SELECT * FROM ranked_employees WHERE rank_in_dept <= 3;
```

## 5. B-Tree and B+ Tree Indexes

MySQL primarily uses B+ trees for its indexes. Here's how they work:

### B-Tree Characteristics
- Balanced tree structure
- Each node contains keys and pointers
- All leaves at same level
- Good for equality and range queries

### B+ Tree Characteristics (used by MySQL)
- All data stored in leaf nodes
- Leaf nodes linked together
- Higher fanout than B-trees
- Better for range scans

### Creating Indexes in MySQL (which uses B+ trees)
```sql
-- Clustered index (primary key)
ALTER TABLE employees ADD PRIMARY KEY (employee_id);

-- Secondary index
CREATE INDEX idx_lastname ON employees(last_name);

-- Composite index
CREATE INDEX idx_dept_salary ON employees(department, salary);

-- Full-text index
CREATE FULLTEXT INDEX idx_product_desc ON products(description);
```

### Index Usage Examples
```sql
-- Force index usage
SELECT * FROM employees FORCE INDEX (idx_lastname) WHERE last_name = 'Smith';

-- Explain plan to see index usage
EXPLAIN SELECT * FROM employees WHERE last_name = 'Smith';

-- Show index statistics
ANALYZE TABLE employees;
SHOW INDEX FROM employees;
```

This comprehensive guide covers all the MySQL topics you requested with practical examples. Each section provides executable SQL code that you can adapt for your specific database structure.